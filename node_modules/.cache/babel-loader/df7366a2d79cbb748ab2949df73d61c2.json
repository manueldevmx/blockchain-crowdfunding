{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FeeBumpTransaction = undefined;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _stellarXdr_generated = require('./generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nvar _hashing = require('./hashing');\n\nvar _transaction = require('./transaction');\n\nvar _transaction_base = require('./transaction_base');\n\nvar _decode_encode_muxed_account = require('./util/decode_encode_muxed_account');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/**\n * Use {@link TransactionBuilder.buildFeeBumpTransaction} to build a\n * FeeBumpTransaction object. If you have an object or base64-encoded string of\n * the transaction envelope XDR use {@link TransactionBuilder.fromXDR}.\n *\n * Once a {@link FeeBumpTransaction} has been created, its attributes and operations\n * should not be changed. You should only add signatures (using {@link FeeBumpTransaction#sign}) before\n * submitting to the network or forwarding on to additional signers.\n * @param {string|xdr.TransactionEnvelope} envelope - The transaction envelope object or base64 encoded string.\n * @param {string} networkPassphrase passphrase of the target stellar network (e.g. \"Public Global Stellar Network ; September 2015\").\n * @extends TransactionBase\n */\n\n\nvar FeeBumpTransaction = exports.FeeBumpTransaction = function (_TransactionBase) {\n  _inherits(FeeBumpTransaction, _TransactionBase);\n\n  function FeeBumpTransaction(envelope, networkPassphrase) {\n    _classCallCheck(this, FeeBumpTransaction);\n\n    if (typeof envelope === 'string') {\n      var buffer = Buffer.from(envelope, 'base64');\n      envelope = _stellarXdr_generated2.default.TransactionEnvelope.fromXDR(buffer);\n    }\n\n    var envelopeType = envelope.switch();\n\n    if (envelopeType !== _stellarXdr_generated2.default.EnvelopeType.envelopeTypeTxFeeBump()) {\n      throw new Error('Invalid TransactionEnvelope: expected an envelopeTypeTxFeeBump but received an ' + envelopeType.name + '.');\n    }\n\n    var txEnvelope = envelope.value();\n    var tx = txEnvelope.tx();\n    var fee = tx.fee().toString(); // clone signatures\n\n    var signatures = (txEnvelope.signatures() || []).slice();\n\n    var _this = _possibleConstructorReturn(this, (FeeBumpTransaction.__proto__ || Object.getPrototypeOf(FeeBumpTransaction)).call(this, tx, signatures, fee, networkPassphrase));\n\n    var innerTxEnvelope = _stellarXdr_generated2.default.TransactionEnvelope.envelopeTypeTx(tx.innerTx().v1());\n\n    _this._feeSource = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(_this.tx.feeSource());\n    _this._innerTransaction = new _transaction.Transaction(innerTxEnvelope, networkPassphrase);\n    return _this;\n  }\n  /**\n   * @type {Transaction}\n   * @readonly\n   */\n\n\n  _createClass(FeeBumpTransaction, [{\n    key: 'signatureBase',\n\n    /**\n     * Returns the \"signature base\" of this transaction, which is the value\n     * that, when hashed, should be signed to create a signature that\n     * validators on the Stellar Network will accept.\n     *\n     * It is composed of a 4 prefix bytes followed by the xdr-encoded form\n     * of this transaction.\n     * @returns {Buffer}\n     */\n    value: function signatureBase() {\n      var taggedTransaction = new _stellarXdr_generated2.default.TransactionSignaturePayloadTaggedTransaction.envelopeTypeTxFeeBump(this.tx);\n      var txSignature = new _stellarXdr_generated2.default.TransactionSignaturePayload({\n        networkId: _stellarXdr_generated2.default.Hash.fromXDR((0, _hashing.hash)(this.networkPassphrase)),\n        taggedTransaction: taggedTransaction\n      });\n      return txSignature.toXDR();\n    }\n    /**\n     * To envelope returns a xdr.TransactionEnvelope which can be submitted to the network.\n     * @returns {xdr.TransactionEnvelope}\n     */\n\n  }, {\n    key: 'toEnvelope',\n    value: function toEnvelope() {\n      var envelope = new _stellarXdr_generated2.default.FeeBumpTransactionEnvelope({\n        tx: _stellarXdr_generated2.default.FeeBumpTransaction.fromXDR(this.tx.toXDR()),\n        // make a copy of the tx\n        signatures: this.signatures.slice() // make a copy of the signatures\n\n      });\n      return new _stellarXdr_generated2.default.TransactionEnvelope.envelopeTypeTxFeeBump(envelope);\n    }\n  }, {\n    key: 'innerTransaction',\n    get: function get() {\n      return this._innerTransaction;\n    }\n    /**\n     * @type {string}\n     * @readonly\n     */\n\n  }, {\n    key: 'feeSource',\n    get: function get() {\n      return this._feeSource;\n    }\n  }]);\n\n  return FeeBumpTransaction;\n}(_transaction_base.TransactionBase);","map":{"version":3,"sources":["/home/manuel/Escritorio/blockchain_code/blockchain-crowdfunding/test_crowdfundig/node_modules/stellar-base/lib/fee_bump_transaction.js"],"names":["Object","defineProperty","exports","value","FeeBumpTransaction","undefined","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","prototype","_stellarXdr_generated","require","_stellarXdr_generated2","_interopRequireDefault","_hashing","_transaction","_transaction_base","_decode_encode_muxed_account","obj","__esModule","default","_classCallCheck","instance","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","create","constructor","setPrototypeOf","__proto__","_TransactionBase","envelope","networkPassphrase","buffer","Buffer","from","TransactionEnvelope","fromXDR","envelopeType","switch","EnvelopeType","envelopeTypeTxFeeBump","Error","name","txEnvelope","tx","fee","toString","signatures","slice","_this","getPrototypeOf","innerTxEnvelope","envelopeTypeTx","innerTx","v1","_feeSource","encodeMuxedAccountToAddress","feeSource","_innerTransaction","Transaction","signatureBase","taggedTransaction","TransactionSignaturePayloadTaggedTransaction","txSignature","TransactionSignaturePayload","networkId","Hash","hash","toXDR","toEnvelope","FeeBumpTransactionEnvelope","get","TransactionBase"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FeeBumpTransaction = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _stellarXdr_generated = require('./generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nvar _hashing = require('./hashing');\n\nvar _transaction = require('./transaction');\n\nvar _transaction_base = require('./transaction_base');\n\nvar _decode_encode_muxed_account = require('./util/decode_encode_muxed_account');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * Use {@link TransactionBuilder.buildFeeBumpTransaction} to build a\n * FeeBumpTransaction object. If you have an object or base64-encoded string of\n * the transaction envelope XDR use {@link TransactionBuilder.fromXDR}.\n *\n * Once a {@link FeeBumpTransaction} has been created, its attributes and operations\n * should not be changed. You should only add signatures (using {@link FeeBumpTransaction#sign}) before\n * submitting to the network or forwarding on to additional signers.\n * @param {string|xdr.TransactionEnvelope} envelope - The transaction envelope object or base64 encoded string.\n * @param {string} networkPassphrase passphrase of the target stellar network (e.g. \"Public Global Stellar Network ; September 2015\").\n * @extends TransactionBase\n */\nvar FeeBumpTransaction = exports.FeeBumpTransaction = function (_TransactionBase) {\n  _inherits(FeeBumpTransaction, _TransactionBase);\n\n  function FeeBumpTransaction(envelope, networkPassphrase) {\n    _classCallCheck(this, FeeBumpTransaction);\n\n    if (typeof envelope === 'string') {\n      var buffer = Buffer.from(envelope, 'base64');\n      envelope = _stellarXdr_generated2.default.TransactionEnvelope.fromXDR(buffer);\n    }\n\n    var envelopeType = envelope.switch();\n    if (envelopeType !== _stellarXdr_generated2.default.EnvelopeType.envelopeTypeTxFeeBump()) {\n      throw new Error('Invalid TransactionEnvelope: expected an envelopeTypeTxFeeBump but received an ' + envelopeType.name + '.');\n    }\n\n    var txEnvelope = envelope.value();\n    var tx = txEnvelope.tx();\n    var fee = tx.fee().toString();\n    // clone signatures\n    var signatures = (txEnvelope.signatures() || []).slice();\n\n    var _this = _possibleConstructorReturn(this, (FeeBumpTransaction.__proto__ || Object.getPrototypeOf(FeeBumpTransaction)).call(this, tx, signatures, fee, networkPassphrase));\n\n    var innerTxEnvelope = _stellarXdr_generated2.default.TransactionEnvelope.envelopeTypeTx(tx.innerTx().v1());\n    _this._feeSource = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(_this.tx.feeSource());\n    _this._innerTransaction = new _transaction.Transaction(innerTxEnvelope, networkPassphrase);\n    return _this;\n  }\n\n  /**\n   * @type {Transaction}\n   * @readonly\n   */\n\n\n  _createClass(FeeBumpTransaction, [{\n    key: 'signatureBase',\n\n\n    /**\n     * Returns the \"signature base\" of this transaction, which is the value\n     * that, when hashed, should be signed to create a signature that\n     * validators on the Stellar Network will accept.\n     *\n     * It is composed of a 4 prefix bytes followed by the xdr-encoded form\n     * of this transaction.\n     * @returns {Buffer}\n     */\n    value: function signatureBase() {\n      var taggedTransaction = new _stellarXdr_generated2.default.TransactionSignaturePayloadTaggedTransaction.envelopeTypeTxFeeBump(this.tx);\n\n      var txSignature = new _stellarXdr_generated2.default.TransactionSignaturePayload({\n        networkId: _stellarXdr_generated2.default.Hash.fromXDR((0, _hashing.hash)(this.networkPassphrase)),\n        taggedTransaction: taggedTransaction\n      });\n\n      return txSignature.toXDR();\n    }\n\n    /**\n     * To envelope returns a xdr.TransactionEnvelope which can be submitted to the network.\n     * @returns {xdr.TransactionEnvelope}\n     */\n\n  }, {\n    key: 'toEnvelope',\n    value: function toEnvelope() {\n      var envelope = new _stellarXdr_generated2.default.FeeBumpTransactionEnvelope({\n        tx: _stellarXdr_generated2.default.FeeBumpTransaction.fromXDR(this.tx.toXDR()), // make a copy of the tx\n        signatures: this.signatures.slice() // make a copy of the signatures\n      });\n\n      return new _stellarXdr_generated2.default.TransactionEnvelope.envelopeTypeTxFeeBump(envelope);\n    }\n  }, {\n    key: 'innerTransaction',\n    get: function get() {\n      return this._innerTransaction;\n    }\n\n    /**\n     * @type {string}\n     * @readonly\n     */\n\n  }, {\n    key: 'feeSource',\n    get: function get() {\n      return this._feeSource;\n    }\n  }]);\n\n  return FeeBumpTransaction;\n}(_transaction_base.TransactionBase);"]},"metadata":{},"sourceType":"script"}