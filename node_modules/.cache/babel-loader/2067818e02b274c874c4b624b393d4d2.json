{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UnsignedInt = undefined;\n\nvar _isNumber = require('lodash/isNumber');\n\nvar _isNumber2 = _interopRequireDefault(_isNumber);\n\nvar _ioMixin = require('./io-mixin');\n\nvar _ioMixin2 = _interopRequireDefault(_ioMixin);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar UnsignedInt = exports.UnsignedInt = {\n  read: function read(io) {\n    return io.readUInt32BE();\n  },\n  write: function write(value, io) {\n    if (!(0, _isNumber2.default)(value)) {\n      throw new Error('XDR Write Error: not a number');\n    }\n\n    if (Math.floor(value) !== value) {\n      throw new Error('XDR Write Error: not an integer');\n    }\n\n    if (value < 0) {\n      throw new Error('XDR Write Error: negative number ' + value);\n    }\n\n    io.writeUInt32BE(value);\n  },\n  isValid: function isValid(value) {\n    if (!(0, _isNumber2.default)(value)) {\n      return false;\n    }\n\n    if (Math.floor(value) !== value) {\n      return false;\n    }\n\n    return value >= UnsignedInt.MIN_VALUE && value <= UnsignedInt.MAX_VALUE;\n  }\n};\nUnsignedInt.MAX_VALUE = Math.pow(2, 32) - 1;\nUnsignedInt.MIN_VALUE = 0;\n(0, _ioMixin2.default)(UnsignedInt);","map":{"version":3,"sources":["/home/manuel/Escritorio/blockchain_code/blockchain-crowdfunding/node_modules/js-xdr/lib/unsigned-int.js"],"names":["Object","defineProperty","exports","value","UnsignedInt","undefined","_isNumber","require","_isNumber2","_interopRequireDefault","_ioMixin","_ioMixin2","obj","__esModule","default","read","io","readUInt32BE","write","Error","Math","floor","writeUInt32BE","isValid","MIN_VALUE","MAX_VALUE","pow"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,WAAR,GAAsBC,SAAtB;;AAEA,IAAIC,SAAS,GAAGC,OAAO,CAAC,iBAAD,CAAvB;;AAEA,IAAIC,UAAU,GAAGC,sBAAsB,CAACH,SAAD,CAAvC;;AAEA,IAAII,QAAQ,GAAGH,OAAO,CAAC,YAAD,CAAtB;;AAEA,IAAII,SAAS,GAAGF,sBAAsB,CAACC,QAAD,CAAtC;;AAEA,SAASD,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEE,IAAAA,OAAO,EAAEF;AAAX,GAArC;AAAwD;;AAE/F,IAAIR,WAAW,GAAGF,OAAO,CAACE,WAAR,GAAsB;AACtCW,EAAAA,IAAI,EAAE,SAASA,IAAT,CAAcC,EAAd,EAAkB;AACtB,WAAOA,EAAE,CAACC,YAAH,EAAP;AACD,GAHqC;AAItCC,EAAAA,KAAK,EAAE,SAASA,KAAT,CAAef,KAAf,EAAsBa,EAAtB,EAA0B;AAC/B,QAAI,CAAC,CAAC,GAAGR,UAAU,CAACM,OAAf,EAAwBX,KAAxB,CAAL,EAAqC;AACnC,YAAM,IAAIgB,KAAJ,CAAU,+BAAV,CAAN;AACD;;AAED,QAAIC,IAAI,CAACC,KAAL,CAAWlB,KAAX,MAAsBA,KAA1B,EAAiC;AAC/B,YAAM,IAAIgB,KAAJ,CAAU,iCAAV,CAAN;AACD;;AAED,QAAIhB,KAAK,GAAG,CAAZ,EAAe;AACb,YAAM,IAAIgB,KAAJ,CAAU,sCAAsChB,KAAhD,CAAN;AACD;;AAEDa,IAAAA,EAAE,CAACM,aAAH,CAAiBnB,KAAjB;AACD,GAlBqC;AAmBtCoB,EAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBpB,KAAjB,EAAwB;AAC/B,QAAI,CAAC,CAAC,GAAGK,UAAU,CAACM,OAAf,EAAwBX,KAAxB,CAAL,EAAqC;AACnC,aAAO,KAAP;AACD;;AACD,QAAIiB,IAAI,CAACC,KAAL,CAAWlB,KAAX,MAAsBA,KAA1B,EAAiC;AAC/B,aAAO,KAAP;AACD;;AAED,WAAOA,KAAK,IAAIC,WAAW,CAACoB,SAArB,IAAkCrB,KAAK,IAAIC,WAAW,CAACqB,SAA9D;AACD;AA5BqC,CAAxC;AA+BArB,WAAW,CAACqB,SAAZ,GAAwBL,IAAI,CAACM,GAAL,CAAS,CAAT,EAAY,EAAZ,IAAkB,CAA1C;AACAtB,WAAW,CAACoB,SAAZ,GAAwB,CAAxB;AAEA,CAAC,GAAGb,SAAS,CAACG,OAAd,EAAuBV,WAAvB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UnsignedInt = undefined;\n\nvar _isNumber = require('lodash/isNumber');\n\nvar _isNumber2 = _interopRequireDefault(_isNumber);\n\nvar _ioMixin = require('./io-mixin');\n\nvar _ioMixin2 = _interopRequireDefault(_ioMixin);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar UnsignedInt = exports.UnsignedInt = {\n  read: function read(io) {\n    return io.readUInt32BE();\n  },\n  write: function write(value, io) {\n    if (!(0, _isNumber2.default)(value)) {\n      throw new Error('XDR Write Error: not a number');\n    }\n\n    if (Math.floor(value) !== value) {\n      throw new Error('XDR Write Error: not an integer');\n    }\n\n    if (value < 0) {\n      throw new Error('XDR Write Error: negative number ' + value);\n    }\n\n    io.writeUInt32BE(value);\n  },\n  isValid: function isValid(value) {\n    if (!(0, _isNumber2.default)(value)) {\n      return false;\n    }\n    if (Math.floor(value) !== value) {\n      return false;\n    }\n\n    return value >= UnsignedInt.MIN_VALUE && value <= UnsignedInt.MAX_VALUE;\n  }\n};\n\nUnsignedInt.MAX_VALUE = Math.pow(2, 32) - 1;\nUnsignedInt.MIN_VALUE = 0;\n\n(0, _ioMixin2.default)(UnsignedInt);"]},"metadata":{},"sourceType":"script"}