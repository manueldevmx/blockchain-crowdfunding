{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.revokeAccountSponsorship = revokeAccountSponsorship;\nexports.revokeTrustlineSponsorship = revokeTrustlineSponsorship;\nexports.revokeOfferSponsorship = revokeOfferSponsorship;\nexports.revokeDataSponsorship = revokeDataSponsorship;\nexports.revokeClaimableBalanceSponsorship = revokeClaimableBalanceSponsorship;\nexports.revokeSignerSponsorship = revokeSignerSponsorship;\n\nvar _isString = require('lodash/isString');\n\nvar _isString2 = _interopRequireDefault(_isString);\n\nvar _stellarXdr_generated = require('../generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nvar _strkey = require('../strkey');\n\nvar _keypair = require('../keypair');\n\nvar _asset = require('../asset');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Create a \"revoke sponsorship\" operation for an account.\n *\n * @function\n * @alias Operation.revokeAccountSponsorship\n * @param {object} opts Options object\n * @param {string} opts.account - The sponsored account ID.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr operation\n *\n * @example\n * const op = Operation.revokeAccountSponsorship({\n *   account: 'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7\n * });\n *\n */\n\n\nfunction revokeAccountSponsorship() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.account)) {\n    throw new Error('account is invalid');\n  }\n\n  var ledgerKey = _stellarXdr_generated2.default.LedgerKey.account(new _stellarXdr_generated2.default.LedgerKeyAccount({\n    accountId: _keypair.Keypair.fromPublicKey(opts.account).xdrAccountId()\n  }));\n\n  var op = _stellarXdr_generated2.default.RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey);\n\n  var opAttributes = {};\n  opAttributes.body = _stellarXdr_generated2.default.OperationBody.revokeSponsorship(op);\n  this.setSourceAccount(opAttributes, opts);\n  return new _stellarXdr_generated2.default.Operation(opAttributes);\n}\n/**\n * Create a \"revoke sponsorship\" operation for a trustline.\n *\n * @function\n * @alias Operation.revokeTrustlineSponsorship\n * @param {object} opts Options object\n * @param {string} opts.account - The account ID which owns the trustline.\n * @param {Asset} opts.asset - The asset in the trustline.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr operation\n *\n * @example\n * const op = Operation.revokeTrustlineSponsorship({\n *   account: 'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7\n *   asset: new StellarBase.Asset(\n *     'USDUSD',\n *     'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7'\n *   )\n * });\n *\n */\n\n\nfunction revokeTrustlineSponsorship() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.account)) {\n    throw new Error('account is invalid');\n  }\n\n  if (!(opts.asset instanceof _asset.Asset)) {\n    throw new Error('asset is invalid');\n  }\n\n  var ledgerKey = _stellarXdr_generated2.default.LedgerKey.trustline(new _stellarXdr_generated2.default.LedgerKeyTrustLine({\n    accountId: _keypair.Keypair.fromPublicKey(opts.account).xdrAccountId(),\n    asset: opts.asset.toXDRObject()\n  }));\n\n  var op = _stellarXdr_generated2.default.RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey);\n\n  var opAttributes = {};\n  opAttributes.body = _stellarXdr_generated2.default.OperationBody.revokeSponsorship(op);\n  this.setSourceAccount(opAttributes, opts);\n  return new _stellarXdr_generated2.default.Operation(opAttributes);\n}\n/**\n * Create a \"revoke sponsorship\" operation for an offer.\n *\n * @function\n * @alias Operation.revokeOfferSponsorship\n * @param {object} opts Options object\n * @param {string} opts.seller - The account ID which created the offer.\n * @param {string} opts.offerId - The offer ID.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr operation\n *\n * @example\n * const op = Operation.revokeOfferSponsorship({\n *   seller: 'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7\n *   offerId: '1234'\n * });\n *\n */\n\n\nfunction revokeOfferSponsorship() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.seller)) {\n    throw new Error('seller is invalid');\n  }\n\n  if (!(0, _isString2.default)(opts.offerId)) {\n    throw new Error('offerId is invalid');\n  }\n\n  var ledgerKey = _stellarXdr_generated2.default.LedgerKey.offer(new _stellarXdr_generated2.default.LedgerKeyOffer({\n    sellerId: _keypair.Keypair.fromPublicKey(opts.seller).xdrAccountId(),\n    offerId: _stellarXdr_generated2.default.Int64.fromString(opts.offerId)\n  }));\n\n  var op = _stellarXdr_generated2.default.RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey);\n\n  var opAttributes = {};\n  opAttributes.body = _stellarXdr_generated2.default.OperationBody.revokeSponsorship(op);\n  this.setSourceAccount(opAttributes, opts);\n  return new _stellarXdr_generated2.default.Operation(opAttributes);\n}\n/**\n * Create a \"revoke sponsorship\" operation for a data entry.\n *\n * @function\n * @alias Operation.revokeDataSponsorship\n * @param {object} opts Options object\n * @param {string} opts.account - The account ID which owns the data entry.\n * @param {string} opts.name - The name of the data entry\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr operation\n *\n * @example\n * const op = Operation.revokeDataSponsorship({\n *   account: 'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7\n *   name: 'foo'\n * });\n *\n */\n\n\nfunction revokeDataSponsorship() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.account)) {\n    throw new Error('account is invalid');\n  }\n\n  if (!(0, _isString2.default)(opts.name) || opts.name.length > 64) {\n    throw new Error('name must be a string, up to 64 characters');\n  }\n\n  var ledgerKey = _stellarXdr_generated2.default.LedgerKey.data(new _stellarXdr_generated2.default.LedgerKeyData({\n    accountId: _keypair.Keypair.fromPublicKey(opts.account).xdrAccountId(),\n    dataName: opts.name\n  }));\n\n  var op = _stellarXdr_generated2.default.RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey);\n\n  var opAttributes = {};\n  opAttributes.body = _stellarXdr_generated2.default.OperationBody.revokeSponsorship(op);\n  this.setSourceAccount(opAttributes, opts);\n  return new _stellarXdr_generated2.default.Operation(opAttributes);\n}\n/**\n * Create a \"revoke sponsorship\" operation for a claimable balance.\n *\n * @function\n * @alias Operation.revokeClaimableBalanceSponsorship\n * @param {object} opts Options object\n * @param {string} opts.balanceId - The sponsored claimable balance ID.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr operation\n *\n * @example\n * const op = Operation.revokeClaimableBalanceSponsorship({\n *   balanceId: '00000000da0d57da7d4850e7fc10d2a9d0ebc731f7afb40574c03395b17d49149b91f5be',\n * });\n *\n */\n\n\nfunction revokeClaimableBalanceSponsorship() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (!(0, _isString2.default)(opts.balanceId)) {\n    throw new Error('balanceId is invalid');\n  }\n\n  var ledgerKey = _stellarXdr_generated2.default.LedgerKey.claimableBalance(new _stellarXdr_generated2.default.LedgerKeyClaimableBalance({\n    balanceId: _stellarXdr_generated2.default.ClaimableBalanceId.fromXDR(opts.balanceId, 'hex')\n  }));\n\n  var op = _stellarXdr_generated2.default.RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey);\n\n  var opAttributes = {};\n  opAttributes.body = _stellarXdr_generated2.default.OperationBody.revokeSponsorship(op);\n  this.setSourceAccount(opAttributes, opts);\n  return new _stellarXdr_generated2.default.Operation(opAttributes);\n}\n/**\n * Create a \"revoke sponsorship\" operation for a signer.\n *\n * @function\n * @alias Operation.revokeSignerSponsorship\n * @param {object} opts Options object\n * @param {string} opts.account - The account ID where the signer sponsorship is being removed from.\n * @param {object} opts.signer - The signer whose sponsorship is being removed.\n * @param {string} [opts.signer.ed25519PublicKey] - The ed25519 public key of the signer.\n * @param {Buffer|string} [opts.signer.sha256Hash] - sha256 hash (Buffer or hex string).\n * @param {Buffer|string} [opts.signer.preAuthTx] - Hash (Buffer or hex string) of transaction.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr operation\n *\n * @example\n * const op = Operation.revokeSignerSponsorship({\n *   account: 'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7\n *   signer: {\n *     ed25519PublicKey: 'GCEZWKCA5VLDNRLN3RPRJMRZOX3Z6G5CHCGSNFHEYVXM3XOJMDS674JZ'\n *   }\n * })\n *\n */\n\n\nfunction revokeSignerSponsorship() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.account)) {\n    throw new Error('account is invalid');\n  }\n\n  var key = void 0;\n\n  if (opts.signer.ed25519PublicKey) {\n    if (!_strkey.StrKey.isValidEd25519PublicKey(opts.signer.ed25519PublicKey)) {\n      throw new Error('signer.ed25519PublicKey is invalid.');\n    }\n\n    var rawKey = _strkey.StrKey.decodeEd25519PublicKey(opts.signer.ed25519PublicKey);\n\n    key = new _stellarXdr_generated2.default.SignerKey.signerKeyTypeEd25519(rawKey);\n  } else if (opts.signer.preAuthTx) {\n    var buffer = void 0;\n\n    if ((0, _isString2.default)(opts.signer.preAuthTx)) {\n      buffer = Buffer.from(opts.signer.preAuthTx, 'hex');\n    } else {\n      buffer = opts.signer.preAuthTx;\n    }\n\n    if (!(Buffer.isBuffer(buffer) && buffer.length === 32)) {\n      throw new Error('signer.preAuthTx must be 32 bytes Buffer.');\n    }\n\n    key = new _stellarXdr_generated2.default.SignerKey.signerKeyTypePreAuthTx(buffer);\n  } else if (opts.signer.sha256Hash) {\n    var _buffer = void 0;\n\n    if ((0, _isString2.default)(opts.signer.sha256Hash)) {\n      _buffer = Buffer.from(opts.signer.sha256Hash, 'hex');\n    } else {\n      _buffer = opts.signer.sha256Hash;\n    }\n\n    if (!(Buffer.isBuffer(_buffer) && _buffer.length === 32)) {\n      throw new Error('signer.sha256Hash must be 32 bytes Buffer.');\n    }\n\n    key = new _stellarXdr_generated2.default.SignerKey.signerKeyTypeHashX(_buffer);\n  } else {\n    throw new Error('signer is invalid');\n  }\n\n  var signer = new _stellarXdr_generated2.default.RevokeSponsorshipOpSigner({\n    accountId: _keypair.Keypair.fromPublicKey(opts.account).xdrAccountId(),\n    signerKey: key\n  });\n\n  var op = _stellarXdr_generated2.default.RevokeSponsorshipOp.revokeSponsorshipSigner(signer);\n\n  var opAttributes = {};\n  opAttributes.body = _stellarXdr_generated2.default.OperationBody.revokeSponsorship(op);\n  this.setSourceAccount(opAttributes, opts);\n  return new _stellarXdr_generated2.default.Operation(opAttributes);\n}","map":{"version":3,"sources":["/home/manuel/Escritorio/blockchain_code/blockchain-crowdfunding/test_crowdfundig/node_modules/stellar-base/lib/operations/revoke_sponsorship.js"],"names":["Object","defineProperty","exports","value","revokeAccountSponsorship","revokeTrustlineSponsorship","revokeOfferSponsorship","revokeDataSponsorship","revokeClaimableBalanceSponsorship","revokeSignerSponsorship","_isString","require","_isString2","_interopRequireDefault","_stellarXdr_generated","_stellarXdr_generated2","_strkey","_keypair","_asset","obj","__esModule","default","opts","arguments","length","undefined","StrKey","isValidEd25519PublicKey","account","Error","ledgerKey","LedgerKey","LedgerKeyAccount","accountId","Keypair","fromPublicKey","xdrAccountId","op","RevokeSponsorshipOp","revokeSponsorshipLedgerEntry","opAttributes","body","OperationBody","revokeSponsorship","setSourceAccount","Operation","asset","Asset","trustline","LedgerKeyTrustLine","toXDRObject","seller","offerId","offer","LedgerKeyOffer","sellerId","Int64","fromString","name","data","LedgerKeyData","dataName","balanceId","claimableBalance","LedgerKeyClaimableBalance","ClaimableBalanceId","fromXDR","key","signer","ed25519PublicKey","rawKey","decodeEd25519PublicKey","SignerKey","signerKeyTypeEd25519","preAuthTx","buffer","Buffer","from","isBuffer","signerKeyTypePreAuthTx","sha256Hash","_buffer","signerKeyTypeHashX","RevokeSponsorshipOpSigner","signerKey","revokeSponsorshipSigner"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.revokeAccountSponsorship = revokeAccountSponsorship;\nexports.revokeTrustlineSponsorship = revokeTrustlineSponsorship;\nexports.revokeOfferSponsorship = revokeOfferSponsorship;\nexports.revokeDataSponsorship = revokeDataSponsorship;\nexports.revokeClaimableBalanceSponsorship = revokeClaimableBalanceSponsorship;\nexports.revokeSignerSponsorship = revokeSignerSponsorship;\n\nvar _isString = require('lodash/isString');\n\nvar _isString2 = _interopRequireDefault(_isString);\n\nvar _stellarXdr_generated = require('../generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nvar _strkey = require('../strkey');\n\nvar _keypair = require('../keypair');\n\nvar _asset = require('../asset');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Create a \"revoke sponsorship\" operation for an account.\n *\n * @function\n * @alias Operation.revokeAccountSponsorship\n * @param {object} opts Options object\n * @param {string} opts.account - The sponsored account ID.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr operation\n *\n * @example\n * const op = Operation.revokeAccountSponsorship({\n *   account: 'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7\n * });\n *\n */\nfunction revokeAccountSponsorship() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.account)) {\n    throw new Error('account is invalid');\n  }\n\n  var ledgerKey = _stellarXdr_generated2.default.LedgerKey.account(new _stellarXdr_generated2.default.LedgerKeyAccount({\n    accountId: _keypair.Keypair.fromPublicKey(opts.account).xdrAccountId()\n  }));\n  var op = _stellarXdr_generated2.default.RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey);\n  var opAttributes = {};\n  opAttributes.body = _stellarXdr_generated2.default.OperationBody.revokeSponsorship(op);\n  this.setSourceAccount(opAttributes, opts);\n\n  return new _stellarXdr_generated2.default.Operation(opAttributes);\n}\n\n/**\n * Create a \"revoke sponsorship\" operation for a trustline.\n *\n * @function\n * @alias Operation.revokeTrustlineSponsorship\n * @param {object} opts Options object\n * @param {string} opts.account - The account ID which owns the trustline.\n * @param {Asset} opts.asset - The asset in the trustline.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr operation\n *\n * @example\n * const op = Operation.revokeTrustlineSponsorship({\n *   account: 'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7\n *   asset: new StellarBase.Asset(\n *     'USDUSD',\n *     'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7'\n *   )\n * });\n *\n */\nfunction revokeTrustlineSponsorship() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.account)) {\n    throw new Error('account is invalid');\n  }\n  if (!(opts.asset instanceof _asset.Asset)) {\n    throw new Error('asset is invalid');\n  }\n\n  var ledgerKey = _stellarXdr_generated2.default.LedgerKey.trustline(new _stellarXdr_generated2.default.LedgerKeyTrustLine({\n    accountId: _keypair.Keypair.fromPublicKey(opts.account).xdrAccountId(),\n    asset: opts.asset.toXDRObject()\n  }));\n  var op = _stellarXdr_generated2.default.RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey);\n  var opAttributes = {};\n  opAttributes.body = _stellarXdr_generated2.default.OperationBody.revokeSponsorship(op);\n  this.setSourceAccount(opAttributes, opts);\n\n  return new _stellarXdr_generated2.default.Operation(opAttributes);\n}\n\n/**\n * Create a \"revoke sponsorship\" operation for an offer.\n *\n * @function\n * @alias Operation.revokeOfferSponsorship\n * @param {object} opts Options object\n * @param {string} opts.seller - The account ID which created the offer.\n * @param {string} opts.offerId - The offer ID.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr operation\n *\n * @example\n * const op = Operation.revokeOfferSponsorship({\n *   seller: 'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7\n *   offerId: '1234'\n * });\n *\n */\nfunction revokeOfferSponsorship() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.seller)) {\n    throw new Error('seller is invalid');\n  }\n  if (!(0, _isString2.default)(opts.offerId)) {\n    throw new Error('offerId is invalid');\n  }\n\n  var ledgerKey = _stellarXdr_generated2.default.LedgerKey.offer(new _stellarXdr_generated2.default.LedgerKeyOffer({\n    sellerId: _keypair.Keypair.fromPublicKey(opts.seller).xdrAccountId(),\n    offerId: _stellarXdr_generated2.default.Int64.fromString(opts.offerId)\n  }));\n  var op = _stellarXdr_generated2.default.RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey);\n  var opAttributes = {};\n  opAttributes.body = _stellarXdr_generated2.default.OperationBody.revokeSponsorship(op);\n  this.setSourceAccount(opAttributes, opts);\n\n  return new _stellarXdr_generated2.default.Operation(opAttributes);\n}\n\n/**\n * Create a \"revoke sponsorship\" operation for a data entry.\n *\n * @function\n * @alias Operation.revokeDataSponsorship\n * @param {object} opts Options object\n * @param {string} opts.account - The account ID which owns the data entry.\n * @param {string} opts.name - The name of the data entry\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr operation\n *\n * @example\n * const op = Operation.revokeDataSponsorship({\n *   account: 'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7\n *   name: 'foo'\n * });\n *\n */\nfunction revokeDataSponsorship() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.account)) {\n    throw new Error('account is invalid');\n  }\n  if (!(0, _isString2.default)(opts.name) || opts.name.length > 64) {\n    throw new Error('name must be a string, up to 64 characters');\n  }\n\n  var ledgerKey = _stellarXdr_generated2.default.LedgerKey.data(new _stellarXdr_generated2.default.LedgerKeyData({\n    accountId: _keypair.Keypair.fromPublicKey(opts.account).xdrAccountId(),\n    dataName: opts.name\n  }));\n  var op = _stellarXdr_generated2.default.RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey);\n  var opAttributes = {};\n  opAttributes.body = _stellarXdr_generated2.default.OperationBody.revokeSponsorship(op);\n  this.setSourceAccount(opAttributes, opts);\n\n  return new _stellarXdr_generated2.default.Operation(opAttributes);\n}\n\n/**\n * Create a \"revoke sponsorship\" operation for a claimable balance.\n *\n * @function\n * @alias Operation.revokeClaimableBalanceSponsorship\n * @param {object} opts Options object\n * @param {string} opts.balanceId - The sponsored claimable balance ID.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr operation\n *\n * @example\n * const op = Operation.revokeClaimableBalanceSponsorship({\n *   balanceId: '00000000da0d57da7d4850e7fc10d2a9d0ebc731f7afb40574c03395b17d49149b91f5be',\n * });\n *\n */\nfunction revokeClaimableBalanceSponsorship() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (!(0, _isString2.default)(opts.balanceId)) {\n    throw new Error('balanceId is invalid');\n  }\n\n  var ledgerKey = _stellarXdr_generated2.default.LedgerKey.claimableBalance(new _stellarXdr_generated2.default.LedgerKeyClaimableBalance({\n    balanceId: _stellarXdr_generated2.default.ClaimableBalanceId.fromXDR(opts.balanceId, 'hex')\n  }));\n  var op = _stellarXdr_generated2.default.RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey);\n  var opAttributes = {};\n  opAttributes.body = _stellarXdr_generated2.default.OperationBody.revokeSponsorship(op);\n  this.setSourceAccount(opAttributes, opts);\n\n  return new _stellarXdr_generated2.default.Operation(opAttributes);\n}\n\n/**\n * Create a \"revoke sponsorship\" operation for a signer.\n *\n * @function\n * @alias Operation.revokeSignerSponsorship\n * @param {object} opts Options object\n * @param {string} opts.account - The account ID where the signer sponsorship is being removed from.\n * @param {object} opts.signer - The signer whose sponsorship is being removed.\n * @param {string} [opts.signer.ed25519PublicKey] - The ed25519 public key of the signer.\n * @param {Buffer|string} [opts.signer.sha256Hash] - sha256 hash (Buffer or hex string).\n * @param {Buffer|string} [opts.signer.preAuthTx] - Hash (Buffer or hex string) of transaction.\n * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.\n * @returns {xdr.Operation} xdr operation\n *\n * @example\n * const op = Operation.revokeSignerSponsorship({\n *   account: 'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7\n *   signer: {\n *     ed25519PublicKey: 'GCEZWKCA5VLDNRLN3RPRJMRZOX3Z6G5CHCGSNFHEYVXM3XOJMDS674JZ'\n *   }\n * })\n *\n */\nfunction revokeSignerSponsorship() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.account)) {\n    throw new Error('account is invalid');\n  }\n  var key = void 0;\n  if (opts.signer.ed25519PublicKey) {\n    if (!_strkey.StrKey.isValidEd25519PublicKey(opts.signer.ed25519PublicKey)) {\n      throw new Error('signer.ed25519PublicKey is invalid.');\n    }\n    var rawKey = _strkey.StrKey.decodeEd25519PublicKey(opts.signer.ed25519PublicKey);\n\n    key = new _stellarXdr_generated2.default.SignerKey.signerKeyTypeEd25519(rawKey);\n  } else if (opts.signer.preAuthTx) {\n    var buffer = void 0;\n    if ((0, _isString2.default)(opts.signer.preAuthTx)) {\n      buffer = Buffer.from(opts.signer.preAuthTx, 'hex');\n    } else {\n      buffer = opts.signer.preAuthTx;\n    }\n\n    if (!(Buffer.isBuffer(buffer) && buffer.length === 32)) {\n      throw new Error('signer.preAuthTx must be 32 bytes Buffer.');\n    }\n\n    key = new _stellarXdr_generated2.default.SignerKey.signerKeyTypePreAuthTx(buffer);\n  } else if (opts.signer.sha256Hash) {\n    var _buffer = void 0;\n    if ((0, _isString2.default)(opts.signer.sha256Hash)) {\n      _buffer = Buffer.from(opts.signer.sha256Hash, 'hex');\n    } else {\n      _buffer = opts.signer.sha256Hash;\n    }\n\n    if (!(Buffer.isBuffer(_buffer) && _buffer.length === 32)) {\n      throw new Error('signer.sha256Hash must be 32 bytes Buffer.');\n    }\n\n    key = new _stellarXdr_generated2.default.SignerKey.signerKeyTypeHashX(_buffer);\n  } else {\n    throw new Error('signer is invalid');\n  }\n\n  var signer = new _stellarXdr_generated2.default.RevokeSponsorshipOpSigner({\n    accountId: _keypair.Keypair.fromPublicKey(opts.account).xdrAccountId(),\n    signerKey: key\n  });\n\n  var op = _stellarXdr_generated2.default.RevokeSponsorshipOp.revokeSponsorshipSigner(signer);\n  var opAttributes = {};\n  opAttributes.body = _stellarXdr_generated2.default.OperationBody.revokeSponsorship(op);\n  this.setSourceAccount(opAttributes, opts);\n\n  return new _stellarXdr_generated2.default.Operation(opAttributes);\n}"]},"metadata":{},"sourceType":"script"}