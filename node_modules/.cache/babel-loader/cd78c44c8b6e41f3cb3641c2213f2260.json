{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getCurrentServerTime = exports.SERVER_TIME_MAP = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar axios_1 = tslib_1.__importDefault(require(\"axios\"));\n\nvar urijs_1 = tslib_1.__importDefault(require(\"urijs\"));\n\nvar version = require(\"../package.json\").version;\n\nexports.SERVER_TIME_MAP = {};\nvar HorizonAxiosClient = axios_1.default.create({\n  headers: {\n    \"X-Client-Name\": \"js-stellar-sdk\",\n    \"X-Client-Version\": version\n  }\n});\n\nfunction _toSeconds(ms) {\n  return Math.floor(ms / 1000);\n}\n\nHorizonAxiosClient.interceptors.response.use(function interceptorHorizonResponse(response) {\n  var hostname = urijs_1.default(response.config.url).hostname();\n\n  var serverTime = _toSeconds(Date.parse(response.headers.date));\n\n  var localTimeRecorded = _toSeconds(new Date().getTime());\n\n  if (!isNaN(serverTime)) {\n    exports.SERVER_TIME_MAP[hostname] = {\n      serverTime: serverTime,\n      localTimeRecorded: localTimeRecorded\n    };\n  }\n\n  return response;\n});\nexports.default = HorizonAxiosClient;\n\nfunction getCurrentServerTime(hostname) {\n  var entry = exports.SERVER_TIME_MAP[hostname];\n\n  if (!entry || !entry.localTimeRecorded || !entry.serverTime) {\n    return null;\n  }\n\n  var serverTime = entry.serverTime,\n      localTimeRecorded = entry.localTimeRecorded;\n\n  var currentTime = _toSeconds(new Date().getTime());\n\n  if (currentTime - localTimeRecorded > 60 * 5) {\n    return null;\n  }\n\n  return currentTime - localTimeRecorded + serverTime;\n}\n\nexports.getCurrentServerTime = getCurrentServerTime;","map":{"version":3,"sources":["../src/horizon_axios_client.ts"],"names":[],"mappings":";;;;;;;;;AAAA,IAAA,OAAA,GAAA,OAAA,CAAA,eAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,eAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AAGA,IAAM,OAAO,GAAG,OAAO,CAAC,iBAAD,CAAP,CAA2B,OAA3C;;AAmBa,OAAA,CAAA,eAAA,GAA8C,EAA9C;AAEb,IAAM,kBAAkB,GAAG,OAAA,CAAA,OAAA,CAAM,MAAN,CAAa;AACtC,EAAA,OAAO,EAAE;AACP,qBAAiB,gBADV;AAEP,wBAAoB;AAFb;AAD6B,CAAb,CAA3B;;AAOA,SAAS,UAAT,CAAoB,EAApB,EAA8B;AAC5B,SAAO,IAAI,CAAC,KAAL,CAAW,EAAE,GAAG,IAAhB,CAAP;AACD;;AAED,kBAAkB,CAAC,YAAnB,CAAgC,QAAhC,CAAyC,GAAzC,CACE,SAAS,0BAAT,CAAoC,QAApC,EAA2D;AACzD,MAAM,QAAQ,GAAG,OAAA,CAAA,OAAA,CAAI,QAAQ,CAAC,MAAT,CAAgB,GAApB,EAA0B,QAA1B,EAAjB;;AACA,MAAM,UAAU,GAAG,UAAU,CAAC,IAAI,CAAC,KAAL,CAAW,QAAQ,CAAC,OAAT,CAAiB,IAA5B,CAAD,CAA7B;;AACA,MAAM,iBAAiB,GAAG,UAAU,CAAC,IAAI,IAAJ,GAAW,OAAX,EAAD,CAApC;;AAEA,MAAI,CAAC,KAAK,CAAC,UAAD,CAAV,EAAwB;AACtB,IAAA,OAAA,CAAA,eAAA,CAAgB,QAAhB,IAA4B;AAC1B,MAAA,UAAU,EAAA,UADgB;AAE1B,MAAA,iBAAiB,EAAA;AAFS,KAA5B;AAID;;AAED,SAAO,QAAP;AACD,CAdH;AAiBA,OAAA,CAAA,OAAA,GAAe,kBAAf;;AAWA,SAAgB,oBAAhB,CAAqC,QAArC,EAAqD;AACnD,MAAM,KAAK,GAAG,OAAA,CAAA,eAAA,CAAgB,QAAhB,CAAd;;AAEA,MAAI,CAAC,KAAD,IAAU,CAAC,KAAK,CAAC,iBAAjB,IAAsC,CAAC,KAAK,CAAC,UAAjD,EAA6D;AAC3D,WAAO,IAAP;AACD;;AAEO,MAAA,UAAU,GAAwB,KAAK,CAA7B,UAAV;AAAA,MAAY,iBAAiB,GAAK,KAAK,CAAV,iBAA7B;;AACR,MAAM,WAAW,GAAG,UAAU,CAAC,IAAI,IAAJ,GAAW,OAAX,EAAD,CAA9B;;AAGA,MAAI,WAAW,GAAG,iBAAd,GAAkC,KAAK,CAA3C,EAA8C;AAC5C,WAAO,IAAP;AACD;;AAED,SAAO,WAAW,GAAG,iBAAd,GAAkC,UAAzC;AACD;;AAhBD,OAAA,CAAA,oBAAA,GAAA,oBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getCurrentServerTime = exports.SERVER_TIME_MAP = void 0;\nvar tslib_1 = require(\"tslib\");\nvar axios_1 = tslib_1.__importDefault(require(\"axios\"));\nvar urijs_1 = tslib_1.__importDefault(require(\"urijs\"));\nvar version = require(\"../package.json\").version;\nexports.SERVER_TIME_MAP = {};\nvar HorizonAxiosClient = axios_1.default.create({\n    headers: {\n        \"X-Client-Name\": \"js-stellar-sdk\",\n        \"X-Client-Version\": version,\n    },\n});\nfunction _toSeconds(ms) {\n    return Math.floor(ms / 1000);\n}\nHorizonAxiosClient.interceptors.response.use(function interceptorHorizonResponse(response) {\n    var hostname = urijs_1.default(response.config.url).hostname();\n    var serverTime = _toSeconds(Date.parse(response.headers.date));\n    var localTimeRecorded = _toSeconds(new Date().getTime());\n    if (!isNaN(serverTime)) {\n        exports.SERVER_TIME_MAP[hostname] = {\n            serverTime: serverTime,\n            localTimeRecorded: localTimeRecorded,\n        };\n    }\n    return response;\n});\nexports.default = HorizonAxiosClient;\nfunction getCurrentServerTime(hostname) {\n    var entry = exports.SERVER_TIME_MAP[hostname];\n    if (!entry || !entry.localTimeRecorded || !entry.serverTime) {\n        return null;\n    }\n    var serverTime = entry.serverTime, localTimeRecorded = entry.localTimeRecorded;\n    var currentTime = _toSeconds(new Date().getTime());\n    if (currentTime - localTimeRecorded > 60 * 5) {\n        return null;\n    }\n    return currentTime - localTimeRecorded + serverTime;\n}\nexports.getCurrentServerTime = getCurrentServerTime;\n//# sourceMappingURL=horizon_axios_client.js.map"]},"metadata":{},"sourceType":"script"}