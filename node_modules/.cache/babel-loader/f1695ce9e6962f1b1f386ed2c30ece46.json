{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StellarTomlResolver = exports.STELLAR_TOML_MAX_SIZE = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar axios_1 = tslib_1.__importDefault(require(\"axios\"));\n\nvar toml_1 = tslib_1.__importDefault(require(\"toml\"));\n\nvar config_1 = require(\"./config\");\n\nexports.STELLAR_TOML_MAX_SIZE = 100 * 1024;\nvar CancelToken = axios_1.default.CancelToken;\n\nvar StellarTomlResolver = function () {\n  function StellarTomlResolver() {}\n\n  StellarTomlResolver.resolve = function (domain, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var allowHttp, timeout, protocol;\n      return tslib_1.__generator(this, function (_a) {\n        allowHttp = typeof opts.allowHttp === \"undefined\" ? config_1.Config.isAllowHttp() : opts.allowHttp;\n        timeout = typeof opts.timeout === \"undefined\" ? config_1.Config.getTimeout() : opts.timeout;\n        protocol = allowHttp ? \"http\" : \"https\";\n        return [2, axios_1.default.get(protocol + \"://\" + domain + \"/.well-known/stellar.toml\", {\n          maxContentLength: exports.STELLAR_TOML_MAX_SIZE,\n          cancelToken: timeout ? new CancelToken(function (cancel) {\n            return setTimeout(function () {\n              return cancel(\"timeout of \" + timeout + \"ms exceeded\");\n            }, timeout);\n          }) : undefined,\n          timeout: timeout\n        }).then(function (response) {\n          try {\n            var tomlObject = toml_1.default.parse(response.data);\n            return Promise.resolve(tomlObject);\n          } catch (e) {\n            return Promise.reject(new Error(\"stellar.toml is invalid - Parsing error on line \" + e.line + \", column \" + e.column + \": \" + e.message));\n          }\n        }).catch(function (err) {\n          if (err.message.match(/^maxContentLength size/)) {\n            throw new Error(\"stellar.toml file exceeds allowed size of \" + exports.STELLAR_TOML_MAX_SIZE);\n          } else {\n            throw err;\n          }\n        })];\n      });\n    });\n  };\n\n  return StellarTomlResolver;\n}();\n\nexports.StellarTomlResolver = StellarTomlResolver;","map":{"version":3,"sources":["../src/stellar_toml_resolver.ts"],"names":[],"mappings":";;;;;;;;;AAAA,IAAA,OAAA,GAAA,OAAA,CAAA,eAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,eAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;;AACA,IAAA,QAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AAGa,OAAA,CAAA,qBAAA,GAAwB,MAAM,IAA9B;AAIb,IAAM,WAAW,GAAG,OAAA,CAAA,OAAA,CAAM,WAA1B;;AAKA,IAAA,mBAAA,GAAA,YAAA;AAAA,WAAA,mBAAA,GAAA,CAoEC;;AAjDqB,EAAA,mBAAA,CAAA,OAAA,GAApB,UACE,MADF,EAEE,IAFF,EAE0D;AAAxD,QAAA,IAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,IAAA,GAAA,EAAA;AAAwD;;;;;AAElD,QAAA,SAAS,GACb,OAAO,IAAI,CAAC,SAAZ,KAA0B,WAA1B,GACI,QAAA,CAAA,MAAA,CAAO,WAAP,EADJ,GAEI,IAAI,CAAC,SAHL;AAKA,QAAA,OAAO,GACX,OAAO,IAAI,CAAC,OAAZ,KAAwB,WAAxB,GAAsC,QAAA,CAAA,MAAA,CAAO,UAAP,EAAtC,GAA4D,IAAI,CAAC,OAD7D;AAGA,QAAA,QAAQ,GAAG,SAAS,GAAG,MAAH,GAAY,OAAhC;AAEN,eAAA,CAAA,CAAA,EAAO,OAAA,CAAA,OAAA,CACJ,GADI,CACG,QAAQ,GAAA,KAAR,GAAc,MAAd,GAAoB,2BADvB,EACoD;AACvD,UAAA,gBAAgB,EAAE,OAAA,CAAA,qBADqC;AAEvD,UAAA,WAAW,EAAE,OAAO,GAChB,IAAI,WAAJ,CAAgB,UAAC,MAAD,EAAO;AACrB,mBAAA,UAAU,CACR,YAAA;AAAM,qBAAA,MAAM,CAAC,gBAAc,OAAd,GAAP,aAAM,CAAN;AAA0C,aADxC,EAER,OAFQ,CAAV;AAGC,WAJH,CADgB,GAOhB,SATmD;AAUvD,UAAA,OAAO,EAAA;AAVgD,SADpD,EAaJ,IAbI,CAaC,UAAC,QAAD,EAAS;AACb,cAAI;AACF,gBAAM,UAAU,GAAG,MAAA,CAAA,OAAA,CAAK,KAAL,CAAW,QAAQ,CAAC,IAApB,CAAnB;AACA,mBAAO,OAAO,CAAC,OAAR,CAAgB,UAAhB,CAAP;AACD,WAHD,CAGE,OAAO,CAAP,EAAU;AACV,mBAAO,OAAO,CAAC,MAAR,CACL,IAAI,KAAJ,CACE,qDAAmD,CAAC,CAAC,IAArD,GAAyD,WAAzD,GAAqE,CAAC,CAAC,MAAvE,GAA6E,IAA7E,GAAkF,CAAC,CAAC,OADtF,CADK,CAAP;AAKD;AACF,SAxBI,EAyBJ,KAzBI,CAyBE,UAAC,GAAD,EAAW;AAChB,cAAI,GAAG,CAAC,OAAJ,CAAY,KAAZ,CAAkB,wBAAlB,CAAJ,EAAiD;AAC/C,kBAAM,IAAI,KAAJ,CACJ,+CAA6C,OAAA,CAAA,qBADzC,CAAN;AAGD,WAJD,MAIO;AACL,kBAAM,GAAN;AACD;AACF,SAjCI,CAAP,CAAA;;;AAkCD,GAhDmB;;AAiDtB,SAAA,mBAAA;AAAC,CApED,EAAA;;AAAa,OAAA,CAAA,mBAAA,GAAA,mBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StellarTomlResolver = exports.STELLAR_TOML_MAX_SIZE = void 0;\nvar tslib_1 = require(\"tslib\");\nvar axios_1 = tslib_1.__importDefault(require(\"axios\"));\nvar toml_1 = tslib_1.__importDefault(require(\"toml\"));\nvar config_1 = require(\"./config\");\nexports.STELLAR_TOML_MAX_SIZE = 100 * 1024;\nvar CancelToken = axios_1.default.CancelToken;\nvar StellarTomlResolver = (function () {\n    function StellarTomlResolver() {\n    }\n    StellarTomlResolver.resolve = function (domain, opts) {\n        if (opts === void 0) { opts = {}; }\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var allowHttp, timeout, protocol;\n            return tslib_1.__generator(this, function (_a) {\n                allowHttp = typeof opts.allowHttp === \"undefined\"\n                    ? config_1.Config.isAllowHttp()\n                    : opts.allowHttp;\n                timeout = typeof opts.timeout === \"undefined\" ? config_1.Config.getTimeout() : opts.timeout;\n                protocol = allowHttp ? \"http\" : \"https\";\n                return [2, axios_1.default\n                        .get(protocol + \"://\" + domain + \"/.well-known/stellar.toml\", {\n                        maxContentLength: exports.STELLAR_TOML_MAX_SIZE,\n                        cancelToken: timeout\n                            ? new CancelToken(function (cancel) {\n                                return setTimeout(function () { return cancel(\"timeout of \" + timeout + \"ms exceeded\"); }, timeout);\n                            })\n                            : undefined,\n                        timeout: timeout,\n                    })\n                        .then(function (response) {\n                        try {\n                            var tomlObject = toml_1.default.parse(response.data);\n                            return Promise.resolve(tomlObject);\n                        }\n                        catch (e) {\n                            return Promise.reject(new Error(\"stellar.toml is invalid - Parsing error on line \" + e.line + \", column \" + e.column + \": \" + e.message));\n                        }\n                    })\n                        .catch(function (err) {\n                        if (err.message.match(/^maxContentLength size/)) {\n                            throw new Error(\"stellar.toml file exceeds allowed size of \" + exports.STELLAR_TOML_MAX_SIZE);\n                        }\n                        else {\n                            throw err;\n                        }\n                    })];\n            });\n        });\n    };\n    return StellarTomlResolver;\n}());\nexports.StellarTomlResolver = StellarTomlResolver;\n//# sourceMappingURL=stellar_toml_resolver.js.map"]},"metadata":{},"sourceType":"script"}