{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Transaction = undefined;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _map = require('lodash/map');\n\nvar _map2 = _interopRequireDefault(_map);\n\nvar _stellarXdr_generated = require('./generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nvar _hashing = require('./hashing');\n\nvar _strkey = require('./strkey');\n\nvar _operation = require('./operation');\n\nvar _memo = require('./memo');\n\nvar _transaction_base = require('./transaction_base');\n\nvar _decode_encode_muxed_account = require('./util/decode_encode_muxed_account');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/**\n * Use {@link TransactionBuilder} to build a transaction object. If you have\n * an object or base64-encoded string of the transaction envelope XDR use {@link TransactionBuilder.fromXDR}.\n *\n * Once a Transaction has been created, its attributes and operations\n * should not be changed. You should only add signatures (using {@link Transaction#sign}) to a Transaction object before\n * submitting to the network or forwarding on to additional signers.\n * @constructor\n * @param {string|xdr.TransactionEnvelope} envelope - The transaction envelope object or base64 encoded string.\n * @param {string} [networkPassphrase] passphrase of the target stellar network (e.g. \"Public Global Stellar Network ; September 2015\").\n * @extends TransactionBase\n */\n\n\nvar Transaction = exports.Transaction = function (_TransactionBase) {\n  _inherits(Transaction, _TransactionBase);\n\n  function Transaction(envelope, networkPassphrase) {\n    _classCallCheck(this, Transaction);\n\n    if (typeof envelope === 'string') {\n      var buffer = Buffer.from(envelope, 'base64');\n      envelope = _stellarXdr_generated2.default.TransactionEnvelope.fromXDR(buffer);\n    }\n\n    var envelopeType = envelope.switch();\n\n    if (!(envelopeType === _stellarXdr_generated2.default.EnvelopeType.envelopeTypeTxV0() || envelopeType === _stellarXdr_generated2.default.EnvelopeType.envelopeTypeTx())) {\n      throw new Error('Invalid TransactionEnvelope: expected an envelopeTypeTxV0 or envelopeTypeTx but received an ' + envelopeType.name + '.');\n    }\n\n    var txEnvelope = envelope.value();\n    var tx = txEnvelope.tx();\n    var fee = tx.fee().toString();\n    var signatures = (txEnvelope.signatures() || []).slice();\n\n    var _this = _possibleConstructorReturn(this, (Transaction.__proto__ || Object.getPrototypeOf(Transaction)).call(this, tx, signatures, fee, networkPassphrase));\n\n    _this._envelopeType = envelopeType;\n    _this._memo = tx.memo();\n    _this._sequence = tx.seqNum().toString();\n\n    switch (_this._envelopeType) {\n      case _stellarXdr_generated2.default.EnvelopeType.envelopeTypeTxV0():\n        _this._source = _strkey.StrKey.encodeEd25519PublicKey(_this.tx.sourceAccountEd25519());\n        break;\n\n      default:\n        _this._source = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(_this.tx.sourceAccount());\n        break;\n    }\n\n    var timeBounds = tx.timeBounds();\n\n    if (timeBounds) {\n      _this._timeBounds = {\n        minTime: timeBounds.minTime().toString(),\n        maxTime: timeBounds.maxTime().toString()\n      };\n    }\n\n    var operations = tx.operations() || [];\n    _this._operations = (0, _map2.default)(operations, function (op) {\n      return _operation.Operation.fromXDRObject(op);\n    });\n    return _this;\n  }\n  /**\n   * @type {object}\n   * @property {string} 64 bit unix timestamp\n   * @property {string} 64 bit unix timestamp\n   * @readonly\n   */\n\n\n  _createClass(Transaction, [{\n    key: 'signatureBase',\n\n    /**\n     * Returns the \"signature base\" of this transaction, which is the value\n     * that, when hashed, should be signed to create a signature that\n     * validators on the Stellar Network will accept.\n     *\n     * It is composed of a 4 prefix bytes followed by the xdr-encoded form\n     * of this transaction.\n     * @returns {Buffer}\n     */\n    value: function signatureBase() {\n      var tx = this.tx; // Backwards Compatibility: Use ENVELOPE_TYPE_TX to sign ENVELOPE_TYPE_TX_V0\n      // we need a Transaction to generate the signature base\n\n      if (this._envelopeType === _stellarXdr_generated2.default.EnvelopeType.envelopeTypeTxV0()) {\n        tx = _stellarXdr_generated2.default.Transaction.fromXDR(Buffer.concat([// TransactionV0 is a transaction with the AccountID discriminant\n        // stripped off, we need to put it back to build a valid transaction\n        // which we can use to build a TransactionSignaturePayloadTaggedTransaction\n        _stellarXdr_generated2.default.PublicKeyType.publicKeyTypeEd25519().toXDR(), tx.toXDR()]));\n      }\n\n      var taggedTransaction = new _stellarXdr_generated2.default.TransactionSignaturePayloadTaggedTransaction.envelopeTypeTx(tx);\n      var txSignature = new _stellarXdr_generated2.default.TransactionSignaturePayload({\n        networkId: _stellarXdr_generated2.default.Hash.fromXDR((0, _hashing.hash)(this.networkPassphrase)),\n        taggedTransaction: taggedTransaction\n      });\n      return txSignature.toXDR();\n    }\n    /**\n     * To envelope returns a xdr.TransactionEnvelope which can be submitted to the network.\n     * @returns {xdr.TransactionEnvelope}\n     */\n\n  }, {\n    key: 'toEnvelope',\n    value: function toEnvelope() {\n      var rawTx = this.tx.toXDR();\n      var signatures = this.signatures.slice(); // make a copy of the signatures\n\n      var envelope = void 0;\n\n      switch (this._envelopeType) {\n        case _stellarXdr_generated2.default.EnvelopeType.envelopeTypeTxV0():\n          envelope = new _stellarXdr_generated2.default.TransactionEnvelope.envelopeTypeTxV0(new _stellarXdr_generated2.default.TransactionV0Envelope({\n            tx: _stellarXdr_generated2.default.TransactionV0.fromXDR(rawTx),\n            // make a copy of tx\n            signatures: signatures\n          }));\n          break;\n\n        case _stellarXdr_generated2.default.EnvelopeType.envelopeTypeTx():\n          envelope = new _stellarXdr_generated2.default.TransactionEnvelope.envelopeTypeTx(new _stellarXdr_generated2.default.TransactionV1Envelope({\n            tx: _stellarXdr_generated2.default.Transaction.fromXDR(rawTx),\n            // make a copy of tx\n            signatures: signatures\n          }));\n          break;\n\n        default:\n          throw new Error('Invalid TransactionEnvelope: expected an envelopeTypeTxV0 or envelopeTypeTx but received an ' + this._envelopeType.name + '.');\n      }\n\n      return envelope;\n    }\n  }, {\n    key: 'timeBounds',\n    get: function get() {\n      return this._timeBounds;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n    /**\n     * @type {string}\n     * @readonly\n     */\n\n  }, {\n    key: 'sequence',\n    get: function get() {\n      return this._sequence;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n    /**\n     * @type {string}\n     * @readonly\n     */\n\n  }, {\n    key: 'source',\n    get: function get() {\n      return this._source;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n    /**\n     * @type {Array.<xdr.Operation>}\n     * @readonly\n     */\n\n  }, {\n    key: 'operations',\n    get: function get() {\n      return this._operations;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n    /**\n     * @type {string}\n     * @readonly\n     */\n\n  }, {\n    key: 'memo',\n    get: function get() {\n      return _memo.Memo.fromXDRObject(this._memo);\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n  }]);\n\n  return Transaction;\n}(_transaction_base.TransactionBase);","map":{"version":3,"sources":["/home/manuel/Escritorio/blockchain_code/blockchain-crowdfunding/node_modules/stellar-base/lib/transaction.js"],"names":["Object","defineProperty","exports","value","Transaction","undefined","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","prototype","_map","require","_map2","_interopRequireDefault","_stellarXdr_generated","_stellarXdr_generated2","_hashing","_strkey","_operation","_memo","_transaction_base","_decode_encode_muxed_account","obj","__esModule","default","_classCallCheck","instance","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","create","constructor","setPrototypeOf","__proto__","_TransactionBase","envelope","networkPassphrase","buffer","Buffer","from","TransactionEnvelope","fromXDR","envelopeType","switch","EnvelopeType","envelopeTypeTxV0","envelopeTypeTx","Error","name","txEnvelope","tx","fee","toString","signatures","slice","_this","getPrototypeOf","_envelopeType","memo","_sequence","seqNum","_source","StrKey","encodeEd25519PublicKey","sourceAccountEd25519","encodeMuxedAccountToAddress","sourceAccount","timeBounds","_timeBounds","minTime","maxTime","operations","_operations","op","Operation","fromXDRObject","signatureBase","concat","PublicKeyType","publicKeyTypeEd25519","toXDR","taggedTransaction","TransactionSignaturePayloadTaggedTransaction","txSignature","TransactionSignaturePayload","networkId","Hash","hash","toEnvelope","rawTx","TransactionV0Envelope","TransactionV0","TransactionV1Envelope","get","set","Memo","TransactionBase"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Transaction = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _map = require('lodash/map');\n\nvar _map2 = _interopRequireDefault(_map);\n\nvar _stellarXdr_generated = require('./generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nvar _hashing = require('./hashing');\n\nvar _strkey = require('./strkey');\n\nvar _operation = require('./operation');\n\nvar _memo = require('./memo');\n\nvar _transaction_base = require('./transaction_base');\n\nvar _decode_encode_muxed_account = require('./util/decode_encode_muxed_account');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * Use {@link TransactionBuilder} to build a transaction object. If you have\n * an object or base64-encoded string of the transaction envelope XDR use {@link TransactionBuilder.fromXDR}.\n *\n * Once a Transaction has been created, its attributes and operations\n * should not be changed. You should only add signatures (using {@link Transaction#sign}) to a Transaction object before\n * submitting to the network or forwarding on to additional signers.\n * @constructor\n * @param {string|xdr.TransactionEnvelope} envelope - The transaction envelope object or base64 encoded string.\n * @param {string} [networkPassphrase] passphrase of the target stellar network (e.g. \"Public Global Stellar Network ; September 2015\").\n * @extends TransactionBase\n */\nvar Transaction = exports.Transaction = function (_TransactionBase) {\n  _inherits(Transaction, _TransactionBase);\n\n  function Transaction(envelope, networkPassphrase) {\n    _classCallCheck(this, Transaction);\n\n    if (typeof envelope === 'string') {\n      var buffer = Buffer.from(envelope, 'base64');\n      envelope = _stellarXdr_generated2.default.TransactionEnvelope.fromXDR(buffer);\n    }\n\n    var envelopeType = envelope.switch();\n    if (!(envelopeType === _stellarXdr_generated2.default.EnvelopeType.envelopeTypeTxV0() || envelopeType === _stellarXdr_generated2.default.EnvelopeType.envelopeTypeTx())) {\n      throw new Error('Invalid TransactionEnvelope: expected an envelopeTypeTxV0 or envelopeTypeTx but received an ' + envelopeType.name + '.');\n    }\n\n    var txEnvelope = envelope.value();\n    var tx = txEnvelope.tx();\n    var fee = tx.fee().toString();\n    var signatures = (txEnvelope.signatures() || []).slice();\n\n    var _this = _possibleConstructorReturn(this, (Transaction.__proto__ || Object.getPrototypeOf(Transaction)).call(this, tx, signatures, fee, networkPassphrase));\n\n    _this._envelopeType = envelopeType;\n    _this._memo = tx.memo();\n    _this._sequence = tx.seqNum().toString();\n\n    switch (_this._envelopeType) {\n      case _stellarXdr_generated2.default.EnvelopeType.envelopeTypeTxV0():\n        _this._source = _strkey.StrKey.encodeEd25519PublicKey(_this.tx.sourceAccountEd25519());\n        break;\n      default:\n        _this._source = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(_this.tx.sourceAccount());\n        break;\n    }\n\n    var timeBounds = tx.timeBounds();\n    if (timeBounds) {\n      _this._timeBounds = {\n        minTime: timeBounds.minTime().toString(),\n        maxTime: timeBounds.maxTime().toString()\n      };\n    }\n    var operations = tx.operations() || [];\n    _this._operations = (0, _map2.default)(operations, function (op) {\n      return _operation.Operation.fromXDRObject(op);\n    });\n    return _this;\n  }\n\n  /**\n   * @type {object}\n   * @property {string} 64 bit unix timestamp\n   * @property {string} 64 bit unix timestamp\n   * @readonly\n   */\n\n\n  _createClass(Transaction, [{\n    key: 'signatureBase',\n\n\n    /**\n     * Returns the \"signature base\" of this transaction, which is the value\n     * that, when hashed, should be signed to create a signature that\n     * validators on the Stellar Network will accept.\n     *\n     * It is composed of a 4 prefix bytes followed by the xdr-encoded form\n     * of this transaction.\n     * @returns {Buffer}\n     */\n    value: function signatureBase() {\n      var tx = this.tx;\n\n      // Backwards Compatibility: Use ENVELOPE_TYPE_TX to sign ENVELOPE_TYPE_TX_V0\n      // we need a Transaction to generate the signature base\n      if (this._envelopeType === _stellarXdr_generated2.default.EnvelopeType.envelopeTypeTxV0()) {\n        tx = _stellarXdr_generated2.default.Transaction.fromXDR(Buffer.concat([\n        // TransactionV0 is a transaction with the AccountID discriminant\n        // stripped off, we need to put it back to build a valid transaction\n        // which we can use to build a TransactionSignaturePayloadTaggedTransaction\n        _stellarXdr_generated2.default.PublicKeyType.publicKeyTypeEd25519().toXDR(), tx.toXDR()]));\n      }\n\n      var taggedTransaction = new _stellarXdr_generated2.default.TransactionSignaturePayloadTaggedTransaction.envelopeTypeTx(tx);\n\n      var txSignature = new _stellarXdr_generated2.default.TransactionSignaturePayload({\n        networkId: _stellarXdr_generated2.default.Hash.fromXDR((0, _hashing.hash)(this.networkPassphrase)),\n        taggedTransaction: taggedTransaction\n      });\n\n      return txSignature.toXDR();\n    }\n\n    /**\n     * To envelope returns a xdr.TransactionEnvelope which can be submitted to the network.\n     * @returns {xdr.TransactionEnvelope}\n     */\n\n  }, {\n    key: 'toEnvelope',\n    value: function toEnvelope() {\n      var rawTx = this.tx.toXDR();\n      var signatures = this.signatures.slice(); // make a copy of the signatures\n\n      var envelope = void 0;\n      switch (this._envelopeType) {\n        case _stellarXdr_generated2.default.EnvelopeType.envelopeTypeTxV0():\n          envelope = new _stellarXdr_generated2.default.TransactionEnvelope.envelopeTypeTxV0(new _stellarXdr_generated2.default.TransactionV0Envelope({\n            tx: _stellarXdr_generated2.default.TransactionV0.fromXDR(rawTx), // make a copy of tx\n            signatures: signatures\n          }));\n          break;\n        case _stellarXdr_generated2.default.EnvelopeType.envelopeTypeTx():\n          envelope = new _stellarXdr_generated2.default.TransactionEnvelope.envelopeTypeTx(new _stellarXdr_generated2.default.TransactionV1Envelope({\n            tx: _stellarXdr_generated2.default.Transaction.fromXDR(rawTx), // make a copy of tx\n            signatures: signatures\n          }));\n          break;\n        default:\n          throw new Error('Invalid TransactionEnvelope: expected an envelopeTypeTxV0 or envelopeTypeTx but received an ' + this._envelopeType.name + '.');\n      }\n\n      return envelope;\n    }\n  }, {\n    key: 'timeBounds',\n    get: function get() {\n      return this._timeBounds;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * @type {string}\n     * @readonly\n     */\n\n  }, {\n    key: 'sequence',\n    get: function get() {\n      return this._sequence;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * @type {string}\n     * @readonly\n     */\n\n  }, {\n    key: 'source',\n    get: function get() {\n      return this._source;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * @type {Array.<xdr.Operation>}\n     * @readonly\n     */\n\n  }, {\n    key: 'operations',\n    get: function get() {\n      return this._operations;\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n\n    /**\n     * @type {string}\n     * @readonly\n     */\n\n  }, {\n    key: 'memo',\n    get: function get() {\n      return _memo.Memo.fromXDRObject(this._memo);\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n  }]);\n\n  return Transaction;\n}(_transaction_base.TransactionBase);"]},"metadata":{},"sourceType":"script"}