{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeAddressToMuxedAccount = decodeAddressToMuxedAccount;\nexports.encodeMuxedAccountToAddress = encodeMuxedAccountToAddress;\n\nvar _stellarXdr_generated = require('../generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nvar _strkey = require('../strkey');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Returns a XDR.MuxedAccount forcing the ed25519 discriminant.\n * @function\n * @param {string} address address to encode to XDR.\n * @returns {xdr.MuxedAccount} MuxedAccount with ed25519 discriminant.\n */\n\n\nfunction decodeAddressToMuxedAccount(address) {\n  return _stellarXdr_generated2.default.MuxedAccount.keyTypeEd25519(_strkey.StrKey.decodeEd25519PublicKey(address));\n}\n/**\n * Converts an xdr.MuxedAccount to its string representation, forcing the ed25519 representation.\n * @function\n * @param {xdr.MuxedAccount} muxedAccount .\n * @returns {string} address\n */\n\n\nfunction encodeMuxedAccountToAddress(muxedAccount) {\n  var ed25519 = void 0;\n\n  if (muxedAccount.switch() === _stellarXdr_generated2.default.CryptoKeyType.keyTypeEd25519()) {\n    ed25519 = muxedAccount.ed25519();\n  } else {\n    ed25519 = muxedAccount.med25519().ed25519();\n  }\n\n  return _strkey.StrKey.encodeEd25519PublicKey(ed25519);\n}","map":{"version":3,"sources":["/home/manuel/Escritorio/blockchain_code/blockchain-crowdfunding/node_modules/stellar-base/lib/util/decode_encode_muxed_account.js"],"names":["Object","defineProperty","exports","value","decodeAddressToMuxedAccount","encodeMuxedAccountToAddress","_stellarXdr_generated","require","_stellarXdr_generated2","_interopRequireDefault","_strkey","obj","__esModule","default","address","MuxedAccount","keyTypeEd25519","StrKey","decodeEd25519PublicKey","muxedAccount","ed25519","switch","CryptoKeyType","med25519","encodeEd25519PublicKey"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,2BAAR,GAAsCA,2BAAtC;AACAF,OAAO,CAACG,2BAAR,GAAsCA,2BAAtC;;AAEA,IAAIC,qBAAqB,GAAGC,OAAO,CAAC,oCAAD,CAAnC;;AAEA,IAAIC,sBAAsB,GAAGC,sBAAsB,CAACH,qBAAD,CAAnD;;AAEA,IAAII,OAAO,GAAGH,OAAO,CAAC,WAAD,CAArB;;AAEA,SAASE,sBAAT,CAAgCE,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEE,IAAAA,OAAO,EAAEF;AAAX,GAArC;AAAwD;AAE/F;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASP,2BAAT,CAAqCU,OAArC,EAA8C;AAC5C,SAAON,sBAAsB,CAACK,OAAvB,CAA+BE,YAA/B,CAA4CC,cAA5C,CAA2DN,OAAO,CAACO,MAAR,CAAeC,sBAAf,CAAsCJ,OAAtC,CAA3D,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAST,2BAAT,CAAqCc,YAArC,EAAmD;AACjD,MAAIC,OAAO,GAAG,KAAK,CAAnB;;AACA,MAAID,YAAY,CAACE,MAAb,OAA0Bb,sBAAsB,CAACK,OAAvB,CAA+BS,aAA/B,CAA6CN,cAA7C,EAA9B,EAA6F;AAC3FI,IAAAA,OAAO,GAAGD,YAAY,CAACC,OAAb,EAAV;AACD,GAFD,MAEO;AACLA,IAAAA,OAAO,GAAGD,YAAY,CAACI,QAAb,GAAwBH,OAAxB,EAAV;AACD;;AAED,SAAOV,OAAO,CAACO,MAAR,CAAeO,sBAAf,CAAsCJ,OAAtC,CAAP;AACD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeAddressToMuxedAccount = decodeAddressToMuxedAccount;\nexports.encodeMuxedAccountToAddress = encodeMuxedAccountToAddress;\n\nvar _stellarXdr_generated = require('../generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nvar _strkey = require('../strkey');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Returns a XDR.MuxedAccount forcing the ed25519 discriminant.\n * @function\n * @param {string} address address to encode to XDR.\n * @returns {xdr.MuxedAccount} MuxedAccount with ed25519 discriminant.\n */\nfunction decodeAddressToMuxedAccount(address) {\n  return _stellarXdr_generated2.default.MuxedAccount.keyTypeEd25519(_strkey.StrKey.decodeEd25519PublicKey(address));\n}\n\n/**\n * Converts an xdr.MuxedAccount to its string representation, forcing the ed25519 representation.\n * @function\n * @param {xdr.MuxedAccount} muxedAccount .\n * @returns {string} address\n */\nfunction encodeMuxedAccountToAddress(muxedAccount) {\n  var ed25519 = void 0;\n  if (muxedAccount.switch() === _stellarXdr_generated2.default.CryptoKeyType.keyTypeEd25519()) {\n    ed25519 = muxedAccount.ed25519();\n  } else {\n    ed25519 = muxedAccount.med25519().ed25519();\n  }\n\n  return _strkey.StrKey.encodeEd25519PublicKey(ed25519);\n}"]},"metadata":{},"sourceType":"script"}