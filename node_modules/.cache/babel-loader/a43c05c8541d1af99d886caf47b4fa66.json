{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FederationServer = exports.FEDERATION_RESPONSE_MAX_SIZE = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar axios_1 = tslib_1.__importDefault(require(\"axios\"));\n\nvar stellar_base_1 = require(\"stellar-base\");\n\nvar urijs_1 = tslib_1.__importDefault(require(\"urijs\"));\n\nvar config_1 = require(\"./config\");\n\nvar errors_1 = require(\"./errors\");\n\nvar stellar_toml_resolver_1 = require(\"./stellar_toml_resolver\");\n\nexports.FEDERATION_RESPONSE_MAX_SIZE = 100 * 1024;\n\nvar FederationServer = function () {\n  function FederationServer(serverURL, domain, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    this.serverURL = urijs_1.default(serverURL);\n    this.domain = domain;\n    var allowHttp = typeof opts.allowHttp === \"undefined\" ? config_1.Config.isAllowHttp() : opts.allowHttp;\n    this.timeout = typeof opts.timeout === \"undefined\" ? config_1.Config.getTimeout() : opts.timeout;\n\n    if (this.serverURL.protocol() !== \"https\" && !allowHttp) {\n      throw new Error(\"Cannot connect to insecure federation server\");\n    }\n  }\n\n  FederationServer.resolve = function (value, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var addressParts, domain, federationServer;\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (value.indexOf(\"*\") < 0) {\n              if (!stellar_base_1.StrKey.isValidEd25519PublicKey(value)) {\n                return [2, Promise.reject(new Error(\"Invalid Account ID\"))];\n              }\n\n              return [2, Promise.resolve({\n                account_id: value\n              })];\n            }\n\n            addressParts = value.split(\"*\");\n            domain = addressParts[1];\n\n            if (addressParts.length !== 2 || !domain) {\n              return [2, Promise.reject(new Error(\"Invalid Stellar address\"))];\n            }\n\n            return [4, FederationServer.createForDomain(domain, opts)];\n\n          case 1:\n            federationServer = _a.sent();\n            return [2, federationServer.resolveAddress(value)];\n        }\n      });\n    });\n  };\n\n  FederationServer.createForDomain = function (domain, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var tomlObject;\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4, stellar_toml_resolver_1.StellarTomlResolver.resolve(domain, opts)];\n\n          case 1:\n            tomlObject = _a.sent();\n\n            if (!tomlObject.FEDERATION_SERVER) {\n              return [2, Promise.reject(new Error(\"stellar.toml does not contain FEDERATION_SERVER field\"))];\n            }\n\n            return [2, new FederationServer(tomlObject.FEDERATION_SERVER, domain, opts)];\n        }\n      });\n    });\n  };\n\n  FederationServer.prototype.resolveAddress = function (address) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var stellarAddress, url;\n      return tslib_1.__generator(this, function (_a) {\n        stellarAddress = address;\n\n        if (address.indexOf(\"*\") < 0) {\n          if (!this.domain) {\n            return [2, Promise.reject(new Error(\"Unknown domain. Make sure `address` contains a domain (ex. `bob*stellar.org`) or pass `domain` parameter when instantiating the server object.\"))];\n          }\n\n          stellarAddress = address + \"*\" + this.domain;\n        }\n\n        url = this.serverURL.query({\n          type: \"name\",\n          q: stellarAddress\n        });\n        return [2, this._sendRequest(url)];\n      });\n    });\n  };\n\n  FederationServer.prototype.resolveAccountId = function (accountId) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var url;\n      return tslib_1.__generator(this, function (_a) {\n        url = this.serverURL.query({\n          type: \"id\",\n          q: accountId\n        });\n        return [2, this._sendRequest(url)];\n      });\n    });\n  };\n\n  FederationServer.prototype.resolveTransactionId = function (transactionId) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var url;\n      return tslib_1.__generator(this, function (_a) {\n        url = this.serverURL.query({\n          type: \"txid\",\n          q: transactionId\n        });\n        return [2, this._sendRequest(url)];\n      });\n    });\n  };\n\n  FederationServer.prototype._sendRequest = function (url) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var timeout;\n      return tslib_1.__generator(this, function (_a) {\n        timeout = this.timeout;\n        return [2, axios_1.default.get(url.toString(), {\n          maxContentLength: exports.FEDERATION_RESPONSE_MAX_SIZE,\n          timeout: timeout\n        }).then(function (response) {\n          if (typeof response.data.memo !== \"undefined\" && typeof response.data.memo !== \"string\") {\n            throw new Error(\"memo value should be of type string\");\n          }\n\n          return response.data;\n        }).catch(function (response) {\n          if (response instanceof Error) {\n            if (response.message.match(/^maxContentLength size/)) {\n              throw new Error(\"federation response exceeds allowed size of \" + exports.FEDERATION_RESPONSE_MAX_SIZE);\n            } else {\n              return Promise.reject(response);\n            }\n          } else {\n            return Promise.reject(new errors_1.BadResponseError(\"Server query failed. Server responded: \" + response.status + \" \" + response.statusText, response.data));\n          }\n        })];\n      });\n    });\n  };\n\n  return FederationServer;\n}();\n\nexports.FederationServer = FederationServer;","map":{"version":3,"sources":["../src/federation_server.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FederationServer = exports.FEDERATION_RESPONSE_MAX_SIZE = void 0;\nvar tslib_1 = require(\"tslib\");\nvar axios_1 = tslib_1.__importDefault(require(\"axios\"));\nvar stellar_base_1 = require(\"stellar-base\");\nvar urijs_1 = tslib_1.__importDefault(require(\"urijs\"));\nvar config_1 = require(\"./config\");\nvar errors_1 = require(\"./errors\");\nvar stellar_toml_resolver_1 = require(\"./stellar_toml_resolver\");\nexports.FEDERATION_RESPONSE_MAX_SIZE = 100 * 1024;\nvar FederationServer = (function () {\n    function FederationServer(serverURL, domain, opts) {\n        if (opts === void 0) { opts = {}; }\n        this.serverURL = urijs_1.default(serverURL);\n        this.domain = domain;\n        var allowHttp = typeof opts.allowHttp === \"undefined\"\n            ? config_1.Config.isAllowHttp()\n            : opts.allowHttp;\n        this.timeout =\n            typeof opts.timeout === \"undefined\" ? config_1.Config.getTimeout() : opts.timeout;\n        if (this.serverURL.protocol() !== \"https\" && !allowHttp) {\n            throw new Error(\"Cannot connect to insecure federation server\");\n        }\n    }\n    FederationServer.resolve = function (value, opts) {\n        if (opts === void 0) { opts = {}; }\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var addressParts, domain, federationServer;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (value.indexOf(\"*\") < 0) {\n                            if (!stellar_base_1.StrKey.isValidEd25519PublicKey(value)) {\n                                return [2, Promise.reject(new Error(\"Invalid Account ID\"))];\n                            }\n                            return [2, Promise.resolve({ account_id: value })];\n                        }\n                        addressParts = value.split(\"*\");\n                        domain = addressParts[1];\n                        if (addressParts.length !== 2 || !domain) {\n                            return [2, Promise.reject(new Error(\"Invalid Stellar address\"))];\n                        }\n                        return [4, FederationServer.createForDomain(domain, opts)];\n                    case 1:\n                        federationServer = _a.sent();\n                        return [2, federationServer.resolveAddress(value)];\n                }\n            });\n        });\n    };\n    FederationServer.createForDomain = function (domain, opts) {\n        if (opts === void 0) { opts = {}; }\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var tomlObject;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4, stellar_toml_resolver_1.StellarTomlResolver.resolve(domain, opts)];\n                    case 1:\n                        tomlObject = _a.sent();\n                        if (!tomlObject.FEDERATION_SERVER) {\n                            return [2, Promise.reject(new Error(\"stellar.toml does not contain FEDERATION_SERVER field\"))];\n                        }\n                        return [2, new FederationServer(tomlObject.FEDERATION_SERVER, domain, opts)];\n                }\n            });\n        });\n    };\n    FederationServer.prototype.resolveAddress = function (address) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var stellarAddress, url;\n            return tslib_1.__generator(this, function (_a) {\n                stellarAddress = address;\n                if (address.indexOf(\"*\") < 0) {\n                    if (!this.domain) {\n                        return [2, Promise.reject(new Error(\"Unknown domain. Make sure `address` contains a domain (ex. `bob*stellar.org`) or pass `domain` parameter when instantiating the server object.\"))];\n                    }\n                    stellarAddress = address + \"*\" + this.domain;\n                }\n                url = this.serverURL.query({ type: \"name\", q: stellarAddress });\n                return [2, this._sendRequest(url)];\n            });\n        });\n    };\n    FederationServer.prototype.resolveAccountId = function (accountId) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var url;\n            return tslib_1.__generator(this, function (_a) {\n                url = this.serverURL.query({ type: \"id\", q: accountId });\n                return [2, this._sendRequest(url)];\n            });\n        });\n    };\n    FederationServer.prototype.resolveTransactionId = function (transactionId) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var url;\n            return tslib_1.__generator(this, function (_a) {\n                url = this.serverURL.query({ type: \"txid\", q: transactionId });\n                return [2, this._sendRequest(url)];\n            });\n        });\n    };\n    FederationServer.prototype._sendRequest = function (url) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var timeout;\n            return tslib_1.__generator(this, function (_a) {\n                timeout = this.timeout;\n                return [2, axios_1.default\n                        .get(url.toString(), {\n                        maxContentLength: exports.FEDERATION_RESPONSE_MAX_SIZE,\n                        timeout: timeout,\n                    })\n                        .then(function (response) {\n                        if (typeof response.data.memo !== \"undefined\" &&\n                            typeof response.data.memo !== \"string\") {\n                            throw new Error(\"memo value should be of type string\");\n                        }\n                        return response.data;\n                    })\n                        .catch(function (response) {\n                        if (response instanceof Error) {\n                            if (response.message.match(/^maxContentLength size/)) {\n                                throw new Error(\"federation response exceeds allowed size of \" + exports.FEDERATION_RESPONSE_MAX_SIZE);\n                            }\n                            else {\n                                return Promise.reject(response);\n                            }\n                        }\n                        else {\n                            return Promise.reject(new errors_1.BadResponseError(\"Server query failed. Server responded: \" + response.status + \" \" + response.statusText, response.data));\n                        }\n                    })];\n            });\n        });\n    };\n    return FederationServer;\n}());\nexports.FederationServer = FederationServer;\n//# sourceMappingURL=federation_server.js.map"]},"metadata":{},"sourceType":"script"}